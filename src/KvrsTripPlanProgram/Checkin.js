function closeoutBeacon(tp, notes, partnerIn, cancel) {
    try {
        var tz = Session.getScriptTimeZone();
        var closeoutDate = Utilities.formatDate(new Date(), tz, "MM/dd/yy HH:mm");
        var ss = SpreadsheetApp.openById(SystemSettings.TRIPPLAN_SHEET_ID);
        var sheet = ss.getSheetByName("Tracker");
        var endRow = sheet.getLastRow();
        var data = sheet.getRange(2, 1, (endRow + 1), 12).getValues();
        //Find Matching TP that is open
        for (var i = 0; i < (endRow - 1); i++) {
            //eventually  throw exception if its already closed.
            if (data[i][(SystemSettings.TRIPPLAN_STATUS_COL - 1)].toString().indexOf("Canceled") === -1 && data[i][(SystemSettings.TRIPPLAN_STATUS_COL - 1)].toString().indexOf("Closed") === -1 && data[i][(SystemSettings.TRIPPLAN_ID_COL - 1)].toString() === tp.toString()) {
                var tpRow = (i + 2);
                break;
            }
        }
        //Get Additioanl Info From Row
        var tpStatus = data[i][(SystemSettings.TRIPPLAN_STATUS_COL - 1)];
        var partnerOut = data[i][(SystemSettings.TRIPPLAN_CHECKOUT_LOC_COL - 1)];
        //Update Closeout Date Column
        sheet.getRange(tpRow, SystemSettings.TRIPPLAN_CLOSED_COL).setValue(closeoutDate);
        //Update Notes Column 

        if (notes.length != 0) notes = "PARTNER CHECK IN NOTE: " + notes;

        if (partnerOut != partnerIn) {
            if (notes.length != 0) notes += " ";
            notes += "SYSTEM NOTE: Beacon checked out at " + partnerOut + " however was returned to " + partnerIn + "."
            var spot = sheet.getRange(tpRow, SystemSettings.TRIPPLAN_BEACON_COL).getValue();
        }
        var existingNotes = sheet.getRange(tpRow, SystemSettings.TRIPPLAN_NOTES_COL).getValue();
        if (existingNotes.length != 0 && notes.length != 0) existingNotes += " ";
        var newNotes = existingNotes + notes;

        sheet.getRange(tpRow, SystemSettings.TRIPPLAN_RETURN_LOC_COL).setValue(partnerIn);
        sheet.getRange(tpRow, SystemSettings.TRIPPLAN_NOTES_COL).setValue(newNotes);
        // Update Status Column
        if (tpStatus.toString() == "OVERDUE") {
          console.log("TP overdue sending email");
            emailOverdueBeconReturn(tpRow);
        }
        if (cancel == true) {
        sheet.getRange(tpRow, SystemSettings.TRIPPLAN_STATUS_COL).setValue("Canceled");
        } else {
          sheet.getRange(tpRow, SystemSettings.TRIPPLAN_STATUS_COL).setValue("Closed");
          updateUsageMetrics(tpRow);
        }
        var user = getUser();
        sheet.getRange(tpRow, SystemSettings.TRIPPLAN_USER_IN_COL).setValue(user);
        var msg = ["OK", tp]
        return msg;
    } catch (f) {
        return ["ERROR", f.toString()];
    }
}

function emailOverdueBeconReturn(tpRow) {
    //Enter email Address For Alerts To Be Sent To  
    //sets active sheet and gets the data and sheet headers
    var ss = SpreadsheetApp.openById(SystemSettings.TRIPPLAN_SHEET_ID);
    var sheet = ss.getSheetByName("Tracker");
    var endCol = sheet.getLastColumn(); 
    var details = sheet.getRange(tpRow, 1, 1, endCol).getValues()[0];
    var headers = sheet.getRange(1, 1, 1, endCol).getValues()[0];
    //Composes Email Subject and Std Body
    var subject = "Overdue KVRS Trip Plan ("+details[(SystemSettings.TRIPPLAN_ID_COL-1)]+")  Closed";
    var body = "The following Overdue Trip Plan has been closed." + "\n\n";
    //Ccmposes details list 
    var cols = [1, 0, 2, 3, 4, 7, 5, 6, 10];
    for (var i = 0; i < details.length; i++) {
        if (cols.indexOf(i) === -1) continue;
        body += headers[i] + ": " + details[i] + "\n"
    }
    //Append no-reply reminder  
    body += "\n\n\n Please do not respond to this email as it is automatically generated by an account that is not checked.";
    //Send email from no-reply address
    MailApp.sendEmail(SystemSettings.TRIPPLAN_ALERT_RECIPIENTS, subject, body, {
        noReply: true
    });
   sheet.getRange(tpRow,16).setValue(false);
    console.log("Alert Cancel Email Sent");

}